{
  "name": "uue",
  "main": "uue.js",
  "version": "1.0.0",
  "description": "UUE decoder and encoder for Node.js",
  "keywords": [
    "uue",
    "uuencode",
    "uudecode",
    "uuencoding",
    "uudecoding"
  ],
  "author": {
    "name": "Mithgol the Webmaster"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Mithgol/node-uue.git"
  },
  "scripts": {
    "pretest": "jshint uue.js test/",
    "test": "mocha --reporter spec --timeout 60s"
  },
  "readme": "The **UUE** module is able to perform [uuencoding](http://en.wikipedia.org/wiki/Uuencoding) of a file (or Node.js Buffer) to a text message. This module is also able to find and decode uuencoded files in text messages.\r\n\r\nThe module is named after a common `.UUE` suffix for Fidonet echomail areas where uuencoded files are posted (sometimes the results of such encoding are also known as “UUE codes”).\r\n\r\nThe module is written in JavaScript and requires [Node.js](http://nodejs.org/) to run.\r\n\r\n## Installing the UUE module\r\n\r\n[![(npm package version)](https://nodei.co/npm/uue.png?downloads=true)](https://npmjs.org/package/uue)\r\n\r\n* Latest packaged version: `npm install uue`\r\n\r\n* Latest githubbed version: `npm install https://github.com/Mithgol/node-uue/tarball/master`\r\n\r\nThe npm package does not contain the tests, they're published on GitHub only.\r\n\r\nYou may visit https://github.com/Mithgol/node-uue#readme occasionally to read the latest `README` because the package's version is not planned to grow after changes when they happen in `README` only. (And `npm publish --force` is [forbidden](http://blog.npmjs.org/post/77758351673/no-more-npm-publish-f) nowadays.)\r\n\r\n## Using the UUE module\r\n\r\nWhen you `require()` the installed module, you get an object that has the following methods:\r\n\r\n### encode(encodeSource, encodeOptions)\r\n\r\nReturns a string of UUE codes that represent the given source.\r\n\r\n* If `encodeSource` is a string, it is interpreted as a path of some file, and that file is uuencoded.\r\n\r\n* If `encodeSource` is a Node.js [Buffer](http://nodejs.org/docs/latest/api/buffer.html), the contents of that buffer become uuencoded.\r\n\r\n**Note: ** if a file's name is given to the `.encode` method, a synchronous reading of the given file is performed. If you need an asynchronous reading, perform it yourself and give the resulting Buffer to the `.encode` method.\r\n\r\nThe optional `encodeOptions` parameter is an object with the following optional properties:\r\n\r\n* `mode` — read/write/execute permissions for the file. If this property is omitted, three last octal digits of the `mode` property of the given file's [`fs.Stats`](http://nodejs.org/docs/latest/api/fs.html#fs_class_fs_stats) object are used (or `'644'` if a Buffer is given in `encodeSource` instead of a file). The `mode` property may be given as a string (of octal digits) or as a number (for example, `'666'` and `438` are equivalent).\r\n\r\n* `filename` — a file's name to be given in UUE codes. (For example, if `encodeOptions` is `{mode:'664', filename:'filename.ext'}`, then the first line of UUE codes is `begin 664 filename.ext`.) If this property is omitted, then [`path.basename(encodeSource)`](http://nodejs.org/docs/latest/api/path.html#path_path_basename_p_ext) is used (or `'buffer.bin'` if a Buffer is given in `encodeSource` instead of a file).\r\n\r\n* `eol` — end-of-line character(s). If this property is omitted, `\\n` (`\\x0A`) is used (as in Web or UN*X applications). You may want to set `encodeOptions.eol` equal to [`os.EOL`](http://nodejs.org/docs/latest/api/os.html#os_os_eol) on other systems. The value of `encodeOptions.eol` is used only as a separator between lines of UUE codes, but neither in the beginning nor at the end of the returned string.\r\n\r\nExample (uuencoding the word `'Cat'`, [as in Wikipedia):](http://en.wikipedia.org/w/index.php?title=Uuencoding&oldid=607304984#Formatting_mechanism)\r\n\r\n![(uuencoding example)](https://cloud.githubusercontent.com/assets/1088720/3140039/8953db68-e901-11e3-9759-0ebff59ea331.gif)\r\n\r\n### decodeFile(text, filename)\r\n\r\nUsing the given `filename`, finds the uuencoded file in the given `text`, decodes the file and returns it as a Node.js [Buffer.](http://nodejs.org/docs/latest/api/buffer.html)\r\n\r\nLines in the given `text` are expected to be separated by `'\\n'` (`\\x0A`).\r\n\r\nInvalid UUE codes are ignored.\r\n\r\nAny UUE codes of any file that has a different filename (not the given `filename`) are ignored. (If `text` contains several uuencoded files, it is not necessary for `filename` to go first.)\r\n\r\nIf several uuencoded files have the same `filename`, only the first is returned.\r\n\r\nIf the file cannot be found, `null` is returned.\r\n\r\n## Locking files\r\n\r\nThe module **does not** lock any files and **does not** create any “lock files” (flag files, semaphore files). The module's caller should control the access to the file that is being encoded.\r\n\r\n## Testing the UUE module\r\n\r\n[![(build testing status)](https://travis-ci.org/Mithgol/node-uue.svg?branch=master)](https://travis-ci.org/Mithgol/node-uue)\r\n\r\nThe tests are not included in the npm package of the module (to keep it small). Use the version from GitHub.\r\n\r\nIt is necessary to install [Mocha](http://visionmedia.github.io/mocha/) and [JSHint](http://jshint.com/) for testing.\r\n\r\n* You may install Mocha globally (`npm install mocha -g`) or locally (`npm install mocha` in the directory of the UUE module).\r\n\r\n* You may install JSHint globally (`npm install jshint -g`) or locally (`npm install jshint` in the directory of the UUE module).\r\n\r\nAfter that you may run `npm test` (in the directory of the UUE module).\r\n\r\n## License\r\n\r\nMIT license (see the `LICENSE` file).",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Mithgol/node-uue/issues"
  },
  "homepage": "https://github.com/Mithgol/node-uue",
  "_id": "uue@1.0.0",
  "_from": "uue@~1.0.0"
}
